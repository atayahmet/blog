<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Javascript'te Hoisted Variables & Functions nedir?]]></title>
      <url>/2017/08/02/Javascript-te-Hoisted-Variables-Functions-nedir/</url>
      <content type="html"><![CDATA[<p>Javascript’de yeni olanların ilk karşılaştıklarında kafalarını karıştırabilecek bir konu olan hoisted variables &amp; functions konusu anlatmaya çalışacağım. Hosited nedir peki? Ne işe yarar? Nerelerde karşımıza çıkar?<br><a id="more"></a></p>
<h2 id="Hoisted-Variables"><a href="#Hoisted-Variables" class="headerlink" title="Hoisted Variables:"></a>Hoisted Variables:</h2><p>Javascript’te değişkenlerimizi var, let ve const gibi türlerle tanımlarız (declare). Sonrasında bir değer atayarak değişkeni kullanıma hazır hale getiriz. İşte tam da burada değişkeni nerede tanımladığımızın çok büyük önemi vardır. </p>
<p>Örnek verelim:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'Merhaba'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Merhaba</span></div></pre></td></tr></table></figure>
<p>Normal şartlarda her zaman bir değişkeni yukarıdaki gibi taımlayıp kullanırız.</p>
<p>Başka bir örnek ile devam edelim:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'Merhaba'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="string">'Selam'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Merhaba</span></div></pre></td></tr></table></figure>
<p>İki tane a değişkeni oluşturduk fakat bir tanesi global kapsamda yani window nesnesine kaydedildi. Diğerini ise x fonksiyon içinde tanımlandık. Çıktının Merhaba olduğunu görebiliyoruz. Tanımlanan değişkenlerin sadece kendi scope’larından erişilebildiğini, scope dışında kalan alanlarda değişkenin aslında hiç oluşturulmadığını görürüz.</p>
<p>Tanımlanmayan (undeclared) bir değişkeni kullanmak istediğimizde ReferenceError istisnasının fırlatıldığını hatırlatalım.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(c) <span class="comment">// throws ReferenceError</span></div></pre></td></tr></table></figure>
<p>Bir değişken tanımlanıp fakat bir değer atanmadığında varsayılan değeri undefined olur.</p>
<p>Örnek: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></div><div class="line"></div><div class="line">b = <span class="string">'Istanbul'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// Istanbul</span></div></pre></td></tr></table></figure>
<p>Bir diğer ayrıntı ise değişken tanımlarken türünü belirtmezsek eğer global kampasamda tanımlanmış olur. Yani tür tanımlanmayan bir değişken, fonksiyon içinde tanımlanmış dahi olsa kodumuzun her hangi bir yerinden erişebiliriz.</p>
<blockquote>
<p><strong>Note:</strong> Eğer değişkene bir fonksiyon içinde değer atanıyorsa, fonksiyonun çalıştırılması gerekir. Aksi takdirde değişken tanımlanmamış olacak.</p>
</blockquote>
<p>Örnek:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  name = <span class="string">'Ahmet'</span>;</div><div class="line">  <span class="keyword">var</span> surname = <span class="string">'ATAY'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">y(); <span class="comment">// call</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Ahmet</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(surname); <span class="comment">// throws ReferenceError</span></div></pre></td></tr></table></figure>
<h2 id="Hoisted-Functions"><a href="#Hoisted-Functions" class="headerlink" title="Hoisted Functions"></a>Hoisted Functions</h2><p>Fonksiyon tanımlarken farklı yöntemler kullanılabilir. Javascript’in bizi şaşırtan bir takım özellikleri burada ortaya çıkıyor.</p>
<p>Bir örnek verelim:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">merhaba(); <span class="comment">// Merhaba</span></div><div class="line"></div><div class="line"><span class="comment">// function declaration</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merhaba</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Merhaba'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">gunaydin(); <span class="comment">// ReferenceError: gunaydin is not defined</span></div><div class="line"></div><div class="line">selam(); <span class="comment">// TypeError undefined is not a function</span></div><div class="line"></div><div class="line"><span class="comment">// function express</span></div><div class="line"><span class="keyword">var</span> selam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Selam'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Yukarıdaki kullanımları sırasıyla açıklayalım;</p>
<p>İlk olarak merhaba() fonksiyonunu çağırdık ve beklediğimiz çıktıyı aldık. Burada şu soruyu soruyor olabilirsiniz; fonksiyon tanımlandığı yerden önce çalıştırıldı. Evet ilk bakışta kafa karıştıcı geliyor. Function hoisting deklare edilmiş olan fonksiyonları scope’ta üste taşır. Böylelikle tanımlama işlemi çalıştırma işleminden önce gerçekleşmiş olur.</p>
<p>Hala daha kafanızda bu konu ile ilgili soru işaretleri var ise şöyle bir açıklama yapabilirim. Tarayıcılar yazdığımız kodları çalıştırmadan önce yorumlar ve hafızaya (memory) kaydeder. Daha sonra kodlar çalıştırılır.</p>
<p>Yazının faydalı olması dileğiyle.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[VueJS 2 Custom Event ile ilgili bir kaç ayrıntı]]></title>
      <url>/2017/04/29/VueJS-Custom-Event-ile-ilgili-bir-kac-ayrinti/</url>
      <content type="html"><![CDATA[<p>VueJS 2 ile birlikte gelen yeniliklerin yanı sıra hali hazırdaki bir takım özellikler de kaldırıldı (depracated) ya da kullanım şekli değiştirildi diyebiliriz. Yeni versiondan etkilenen özelliklerden biri de Custom Event’lerin kullanımlarıdır.<br><a id="more"></a><br>Şöyleki; VueJS version 1’de parent instance’tan child component’te kaydedilmiş bir event yada event’leri <code>$broadcast</code> edebiliyorduk diğer bir söylemle tetikleyebiliyorduk. Şuan da version 2’de bu özellik resmi olarak kaldırılmış durumda, yani parent’tan child componentteki bir event’leri çalıştıramıyoruz.</p>
<p>Artık sadece child component’ten parent instance’taki event’leri çalıştırabiliyoruz. Burada yine bir kullanım dğeişikliği söz konusu, version 1’de <code>$dispatch</code> ile child component’ten parent’taki bir event tetikliyorken, version 2’de bu süreç artık tamamen event directive’leri üzerinden ilerliyor.</p>
<p><strong><em>Parent-Child event yönetimi ile ilgili dökümanda bulunan ayrıntı:</em></strong><br><blockquote><p>You cannot use $on to listen to events emitted by children. You must use v-on directly in the template, as in the example below.</p>
<footer><strong>VueJS 2 Document</strong><cite><a href="https://vuejs.org/v2/guide/components.html#Custom-Events" target="_blank" rel="external">Custom Events</a></cite></footer></blockquote></p>
<p>Örnek:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">products</span> <span class="attr">v-on:alert</span>=<span class="string">"alerts"</span>&gt;</span><span class="tag">&lt;/<span class="name">products</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Products Component:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'products'</span>, &#123;</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    getProducts() &#123;</div><div class="line">      <span class="keyword">this</span>.$emit(<span class="string">'alert'</span>, <span class="string">'Ürün bulunamadı'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Product List Component (parent):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    alerts(message) &#123;</div><div class="line">      <span class="comment">// Ürün bulunamadı</span></div><div class="line">      <span class="built_in">console</span>.log(message);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;).$mount(<span class="string">'example'</span>);</div></pre></td></tr></table></figure>
<p>Sonuç itibariyle</p>
<p>Üzerinde çalıştığım projede parent instance’tan child component’teki bir event’i tetiklemem gerektiğinden bunu farklı bir yöntemle çözdüm. One-way binding yapıp child component’te tanımladığım prop’u VueJS watch ile izleyerek bir nevi event gibi kullanmış oldum. </p>
<p>Yöntem çok doğru olmasada version 2’de bu durumu çözecek her hangi bir püf nokta bulamadım. Eğer bu durumu çözecek bir fikri olan birileri varsa yorumda bunu belirtebilirse beni ve ihtyacı olanları ihya edecektir.</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
            <category> VueJS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> VueJS </tag>
            
            <tag> Custom Events </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
